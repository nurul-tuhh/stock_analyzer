get_symbol_from_user_input <- function(user_input) {
user_input_array <- str_split(user_input, ", ")
return(user_input_array[[1]][1])
}
get_stock_data <- function(
stock_symbol,
from = today() - days(180),
to = today(),
mavg_short = 20,
mavg_long = 50
) {
stock_symbol %>% quantmod::getSymbols(
from = from,
to = to,
auto.assign = F
) %>%
timetk::tk_tbl(preserve_index = T,silent = T) %>%
mutate(currency = case_when(
str_detect(names(.) %>% last(), "DE") ~ "EUR", TRUE ~ "USD")
) %>%
set_names(c("date", "open", "high", "low", "close", "volume", "adjusted", "currency")) %>%
drop_na() %>%
mutate(date = as.Date(date, "%d.%m.%y")) %>%
mutate(mavg_short = rollmean(adjusted, mavg_short,  fill = NA, align = "right")) %>%
mutate(mavg_long = rollmean(adjusted, mavg_long,  fill = NA, align = "right")) %>%
dplyr::select(date, adjusted, mavg_short, mavg_long, currency)
}
currency_format <- function(currency) {
if (currency == "dollar")
{ x <- scales::dollar_format(largest_with_cents = 10) }
if (currency == "euro")
{ x <- scales::dollar_format(prefix = "", suffix = " €",
big.mark = ".", decimal.mark = ",",
largest_with_cents = 10)}
return(x)
}
plot_stock_data <- function(stock_data) {
g <- stock_data %>%
pivot_longer(
cols = c("adjusted", "mavg_short", "mavg_long"),
names_to = "legend",
values_to = "value",
names_ptypes = list(legend = factor())
) %>%
ggplot(aes(x = date, y = value, group = legend)) +
geom_line(aes(linetype = legend)) +
scale_y_continuous(labels = stock_data %>% pull(currency) %>% first() %>% currency_format()) +
labs(y = "Adjusted Share Price", x = "")
ggplotly(g)
}
# Helper function end ---
"ADS.DE, Adidas" %>% get_symbol_from_user_input() %>% get_stock_data() %>% plot_stock_data
library(shiny)
library(shinyWidgets)
library(plotly)
library(tidyverse)
library(rvest)
library(glue)
# Helper functions ---
get_stock_list <- function(stock_index = "DAX") {
# Control for upper and lower case
index_lower <- str_to_lower(stock_index)
# Control if user input is valid
index_valid <- c("dax", "sp500", "dow", "nasdaq")
if (!index_lower %in% index_valid) {stop(paste0("x must be a character string in the form of a valid exchange.",
" The following are valid options:\n",
stringr::str_c(str_to_upper(index_valid), collapse = ", ")))
}
# Control for different currencies and different column namings in wiki
vars <- switch(index_lower,
dax    = list(wiki     = "DAX",
columns  = c("Ticker symbol", "Company")),
sp500  = list(wiki     = "List_of_S%26P_500_companies",
columns  = c("Symbol", "Security")),
dow    = list(wiki     = "Dow_Jones_Industrial_Average",
columns  = c("Symbol", "Company")),
nasdaq = list(wiki     = "NASDAQ-100",
columns  = c("Ticker", "Company"))
)
# Extract stock list depending on user input
read_html(glue("https://en.wikipedia.org/wiki/{vars$wiki}")) %>%
# Extract table from wiki
html_nodes(css = "#constituents") %>%
html_table() %>%
dplyr::first() %>%
as_tibble(.name_repair = "minimal") %>%
# Select desired columns (different for each article)
dplyr::select(vars$columns) %>%
# Make naming identical
set_names(c("symbol", "company")) %>%
# Clean (just relevant for DOW)
mutate(symbol = str_remove(symbol, "NYSE\\:[[:space:]]")) %>%
# Sort
arrange(symbol) %>%
# Create the label for the dropdown list (Symbol + company name)
mutate(label = str_c(symbol, company, sep = ", ")) %>%
dplyr::select(label)
}
get_symbol_from_user_input <- function(user_input) {
user_input_array <- str_split(user_input, ", ")
return(user_input_array[[1]][1])
}
get_stock_data <- function(
stock_symbol,
from = today() - days(180),
to = today(),
mavg_short = 20,
mavg_long = 50
) {
stock_symbol %>% quantmod::getSymbols(
from = from,
to = to,
auto.assign = F
) %>%
timetk::tk_tbl(preserve_index = T,silent = T) %>%
mutate(currency = case_when(
str_detect(names(.) %>% last(), "DE") ~ "EUR", TRUE ~ "USD")
) %>%
set_names(c("date", "open", "high", "low", "close", "volume", "adjusted", "currency")) %>%
drop_na() %>%
mutate(date = as.Date(date, "%d.%m.%y")) %>%
mutate(mavg_short = rollmean(adjusted, mavg_short,  fill = NA, align = "right")) %>%
mutate(mavg_long = rollmean(adjusted, mavg_long,  fill = NA, align = "right")) %>%
dplyr::select(date, adjusted, mavg_short, mavg_long, currency)
}
currency_format <- function(currency) {
if (currency == "dollar")
{ x <- scales::dollar_format(largest_with_cents = 10) }
if (currency == "euro")
{ x <- scales::dollar_format(prefix = "", suffix = " €",
big.mark = ".", decimal.mark = ",",
largest_with_cents = 10)}
return(x)
}
plot_stock_data <- function(stock_data) {
g <- stock_data %>%
pivot_longer(
cols = c("adjusted", "mavg_short", "mavg_long"),
names_to = "legend",
values_to = "value",
names_ptypes = list(legend = factor())
) %>%
ggplot(aes(x = date, y = value, group = legend)) +
geom_line(aes(linetype = legend)) +
labs(y = "Adjusted Share Price", x = "")
ggplotly(g)
}
# Helper function end ---
"ADS.DE, Adidas" %>% get_symbol_from_user_input() %>% get_stock_data() %>% plot_stock_data
library(shiny)
library(shinyWidgets)
library(plotly)
library(tidyverse)
library(rvest)
library(glue)
# Helper functions ---
get_stock_list <- function(stock_index = "DAX") {
# Control for upper and lower case
index_lower <- str_to_lower(stock_index)
# Control if user input is valid
index_valid <- c("dax", "sp500", "dow", "nasdaq")
if (!index_lower %in% index_valid) {stop(paste0("x must be a character string in the form of a valid exchange.",
" The following are valid options:\n",
stringr::str_c(str_to_upper(index_valid), collapse = ", ")))
}
# Control for different currencies and different column namings in wiki
vars <- switch(index_lower,
dax    = list(wiki     = "DAX",
columns  = c("Ticker symbol", "Company")),
sp500  = list(wiki     = "List_of_S%26P_500_companies",
columns  = c("Symbol", "Security")),
dow    = list(wiki     = "Dow_Jones_Industrial_Average",
columns  = c("Symbol", "Company")),
nasdaq = list(wiki     = "NASDAQ-100",
columns  = c("Ticker", "Company"))
)
# Extract stock list depending on user input
read_html(glue("https://en.wikipedia.org/wiki/{vars$wiki}")) %>%
# Extract table from wiki
html_nodes(css = "#constituents") %>%
html_table() %>%
dplyr::first() %>%
as_tibble(.name_repair = "minimal") %>%
# Select desired columns (different for each article)
dplyr::select(vars$columns) %>%
# Make naming identical
set_names(c("symbol", "company")) %>%
# Clean (just relevant for DOW)
mutate(symbol = str_remove(symbol, "NYSE\\:[[:space:]]")) %>%
# Sort
arrange(symbol) %>%
# Create the label for the dropdown list (Symbol + company name)
mutate(label = str_c(symbol, company, sep = ", ")) %>%
dplyr::select(label)
}
get_symbol_from_user_input <- function(user_input) {
user_input_array <- str_split(user_input, ", ")
return(user_input_array[[1]][1])
}
get_stock_data <- function(
stock_symbol,
from = today() - days(180),
to = today(),
mavg_short = 20,
mavg_long = 50
) {
stock_symbol %>% quantmod::getSymbols(
from = from,
to = to,
auto.assign = F
) %>%
timetk::tk_tbl(preserve_index = T,silent = T) %>%
mutate(currency = case_when(
str_detect(names(.) %>% last(), "DE") ~ "EUR", TRUE ~ "USD")
) %>%
set_names(c("date", "open", "high", "low", "close", "volume", "adjusted", "currency")) %>%
drop_na() %>%
mutate(date = as.Date(date, "%d.%m.%y")) %>%
mutate(mavg_short = rollmean(adjusted, mavg_short,  fill = NA, align = "right")) %>%
mutate(mavg_long = rollmean(adjusted, mavg_long,  fill = NA, align = "right")) %>%
dplyr::select(date, adjusted, mavg_short, mavg_long, currency)
}
currency_format <- function(currency) {
if (currency == "dollar")
{ x <- scales::dollar_format(largest_with_cents = 10) }
if (currency == "euro")
{ x <- scales::dollar_format(prefix = "", suffix = " €",
big.mark = ".", decimal.mark = ",",
largest_with_cents = 10)}
return(x)
}
plot_stock_data <- function(stock_data) {
g <- stock_data %>%
pivot_longer(
cols = c("adjusted", "mavg_short", "mavg_long"),
names_to = "legend",
values_to = "value",
names_ptypes = list(legend = factor())
) %>%
ggplot(aes(x = date, y = value, group = legend)) +
geom_line(aes(linetype = legend)) +
labs(y = "Adjusted Share Price", x = "")
ggplotly(g)
}
# Helper function end ---
"ADS.DE, Adidas" %>% get_symbol_from_user_input() %>% get_stock_data() %>% plot_stock_data()
library(shiny)
library(shinyWidgets)
library(plotly)
library(tidyverse)
library(rvest)
library(glue)
# Helper functions ---
get_stock_list <- function(stock_index = "DAX") {
# Control for upper and lower case
index_lower <- str_to_lower(stock_index)
# Control if user input is valid
index_valid <- c("dax", "sp500", "dow", "nasdaq")
if (!index_lower %in% index_valid) {stop(paste0("x must be a character string in the form of a valid exchange.",
" The following are valid options:\n",
stringr::str_c(str_to_upper(index_valid), collapse = ", ")))
}
# Control for different currencies and different column namings in wiki
vars <- switch(index_lower,
dax    = list(wiki     = "DAX",
columns  = c("Ticker symbol", "Company")),
sp500  = list(wiki     = "List_of_S%26P_500_companies",
columns  = c("Symbol", "Security")),
dow    = list(wiki     = "Dow_Jones_Industrial_Average",
columns  = c("Symbol", "Company")),
nasdaq = list(wiki     = "NASDAQ-100",
columns  = c("Ticker", "Company"))
)
# Extract stock list depending on user input
read_html(glue("https://en.wikipedia.org/wiki/{vars$wiki}")) %>%
# Extract table from wiki
html_nodes(css = "#constituents") %>%
html_table() %>%
dplyr::first() %>%
as_tibble(.name_repair = "minimal") %>%
# Select desired columns (different for each article)
dplyr::select(vars$columns) %>%
# Make naming identical
set_names(c("symbol", "company")) %>%
# Clean (just relevant for DOW)
mutate(symbol = str_remove(symbol, "NYSE\\:[[:space:]]")) %>%
# Sort
arrange(symbol) %>%
# Create the label for the dropdown list (Symbol + company name)
mutate(label = str_c(symbol, company, sep = ", ")) %>%
dplyr::select(label)
}
get_symbol_from_user_input <- function(user_input) {
user_input_array <- str_split(user_input, ", ")
return(user_input_array[[1]][1])
}
get_stock_data <- function(
stock_symbol,
from = today() - days(180),
to = today(),
mavg_short = 20,
mavg_long = 50
) {
stock_symbol %>% quantmod::getSymbols(
from = from,
to = to,
auto.assign = F
) %>%
timetk::tk_tbl(preserve_index = T,silent = T) %>%
mutate(currency = case_when(
str_detect(names(.) %>% last(), "DE") ~ "EUR", TRUE ~ "USD")
) %>%
set_names(c("date", "open", "high", "low", "close", "volume", "adjusted", "currency")) %>%
drop_na() %>%
mutate(date = as.Date(date, "%d.%m.%y")) %>%
mutate(mavg_short = rollmean(adjusted, mavg_short,  fill = NA, align = "right")) %>%
mutate(mavg_long = rollmean(adjusted, mavg_long,  fill = NA, align = "right")) %>%
dplyr::select(date, adjusted, mavg_short, mavg_long, currency)
}
currency_format <- function(currency) {
if (currency == "dollar")
{ x <- scales::dollar_format(largest_with_cents = 10) }
if (currency == "euro")
{ x <- scales::dollar_format(prefix = "", suffix = " €",
big.mark = ".", decimal.mark = ",",
largest_with_cents = 10)}
return(x)
}
plot_stock_data <- function(stock_data) {
g <- stock_data %>%
pivot_longer(
cols = c("adjusted", "mavg_short", "mavg_long"),
names_to = "legend",
values_to = "value",
names_ptypes = list(legend = factor())
) %>%
ggplot(aes(x = date, y = value, group = legend)) +
geom_line(aes(linetype = legend)) +
labs(y = "Adjusted Share Price", x = "")
ggplotly(g)
}
# Helper function end ---
"ADS.DE, Adidas" %>% get_symbol_from_user_input() %>% get_stock_data() %>% plot_stock_data()
library(shiny)
library(shinyWidgets)
library(plotly)
library(tidyverse)
library(rvest)
library(glue)
# Helper functions ---
get_stock_list <- function(stock_index = "DAX") {
# Control for upper and lower case
index_lower <- str_to_lower(stock_index)
# Control if user input is valid
index_valid <- c("dax", "sp500", "dow", "nasdaq")
if (!index_lower %in% index_valid) {stop(paste0("x must be a character string in the form of a valid exchange.",
" The following are valid options:\n",
stringr::str_c(str_to_upper(index_valid), collapse = ", ")))
}
# Control for different currencies and different column namings in wiki
vars <- switch(index_lower,
dax    = list(wiki     = "DAX",
columns  = c("Ticker symbol", "Company")),
sp500  = list(wiki     = "List_of_S%26P_500_companies",
columns  = c("Symbol", "Security")),
dow    = list(wiki     = "Dow_Jones_Industrial_Average",
columns  = c("Symbol", "Company")),
nasdaq = list(wiki     = "NASDAQ-100",
columns  = c("Ticker", "Company"))
)
# Extract stock list depending on user input
read_html(glue("https://en.wikipedia.org/wiki/{vars$wiki}")) %>%
# Extract table from wiki
html_nodes(css = "#constituents") %>%
html_table() %>%
dplyr::first() %>%
as_tibble(.name_repair = "minimal") %>%
# Select desired columns (different for each article)
dplyr::select(vars$columns) %>%
# Make naming identical
set_names(c("symbol", "company")) %>%
# Clean (just relevant for DOW)
mutate(symbol = str_remove(symbol, "NYSE\\:[[:space:]]")) %>%
# Sort
arrange(symbol) %>%
# Create the label for the dropdown list (Symbol + company name)
mutate(label = str_c(symbol, company, sep = ", ")) %>%
dplyr::select(label)
}
get_symbol_from_user_input <- function(user_input) {
user_input_array <- str_split(user_input, ", ")
return(user_input_array[[1]][1])
}
get_stock_data <- function(
stock_symbol,
from = today() - days(180),
to = today(),
mavg_short = 20,
mavg_long = 50
) {
stock_symbol %>% quantmod::getSymbols(
from = from,
to = to,
auto.assign = F
) %>%
timetk::tk_tbl(preserve_index = T,silent = T) %>%
mutate(currency = case_when(
str_detect(names(.) %>% last(), "DE") ~ "EUR", TRUE ~ "USD")
) %>%
set_names(c("date", "open", "high", "low", "close", "volume", "adjusted", "currency")) %>%
drop_na() %>%
mutate(date = as.Date(date, "%d.%m.%y")) %>%
mutate(mavg_short = rollmean(adjusted, mavg_short,  fill = NA, align = "right")) %>%
mutate(mavg_long = rollmean(adjusted, mavg_long,  fill = NA, align = "right")) %>%
dplyr::select(date, adjusted, mavg_short, mavg_long, currency)
}
currency_format <- function(currency) {
if (currency == "dollar")
{ x <- scales::dollar_format(largest_with_cents = 10) }
if (currency == "euro")
{ x <- scales::dollar_format(prefix = "", suffix = " €",
big.mark = ".", decimal.mark = ",",
largest_with_cents = 10)}
return(x)
}
plot_stock_data <- function(stock_data) {
g <- stock_data %>%
pivot_longer(
cols = c("adjusted", "mavg_short", "mavg_long"),
names_to = "legend",
values_to = "value",
names_ptypes = list(legend = factor())
) %>%
ggplot(aes(x = date, y = value, group = legend)) +
geom_line(aes(linetype = legend)) +
labs(y = "Adjusted Share Price", x = "")
ggplotly(g)
}
generate_commentary <- function(data, user_input) {
warning_signal <- data %>%
tail(1) %>% # Get last value
mutate(mavg_warning_flag = mavg_short < mavg_long) %>%
pull(mavg_warning_flag)
n_short <- data %>% pull(mavg_short) %>% is.na() %>% sum() + 1
n_long  <- data %>% pull(mavg_long) %>% is.na() %>% sum() + 1
if (warning_signal) {
str_glue("In reviewing the stock prices of {user_input}, the {n_short}-day moving average is below the {n_long}-day moving average, indicating negative trends")
} else {
str_glue("In reviewing the stock prices of {user_input}, the {n_short}-day moving average is above the {n_long}-day moving average, indicating positive trends")
}
}
# Helper function end ---
"ADS.DE, Adidas" %>% get_symbol_from_user_input() %>% get_stock_data() %>% generate_commentary(user_input = "ADS.DE, Adidas")
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='n-rashid', token='D37961387A6962AFC65749BEB51596AE', secret='MLc75wRLOV4o1MfO6QicLJRJX0ug1znO4dE0f5Oe')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
runApp('stock_analyzer.R')
library(shiny); runApp('stock_analyzer.R')
install.packages("lubridate")
runApp('stock_analyzer.R')
install.packages("lubridate")
library(shiny); runApp('stock_analyzer.R')
library(shiny); runApp('stock_analyzer.R')
